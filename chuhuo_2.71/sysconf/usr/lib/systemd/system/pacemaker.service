[Unit]
Description=Pacemaker High Availability Cluster Manager

After=basic.target
After=network.target
After=corosync.service

Requires=basic.target
Requires=network.target
Requires=corosync.service

[Install]
WantedBy=multi-user.target

[Service]
Type=simple
KillMode=process
NotifyAccess=main
SysVStartPriority=99
SuccessExitStatus=100
EnvironmentFile=-/etc/sysconfig/pacemaker

ExecStart=/usr/sbin/pacemakerd -f

# If pacemakerd doesn't stop, its probably waiting on a cluster
# resource.  Sending -KILL will just get the node fenced
SendSIGKILL=no

# If we ever hit the StartLimitInterval/StartLimitBurst limit and the
# admin wants to stop the cluster while pacemakerd is not running, it
# might be a good idea to enable the ExecStopPost directive below.
#
# Although the node will likely end up being fenced as a result so its
# not on by default
#
# ExecStopPost=killall -TERM crmd attrd fenced cib pengine lrmd

# If you want Corosync to stop whenever Pacemaker is stopped,
# uncomment the next line too:
#
# ExecStopPost=killall -TERM corosync

# Uncomment this for older versions of systemd that didn't support
# TimeoutStopSec
# TimeoutSec=30min

# Pacemaker can only exit after all managed services have shut down
# A HA database could conceivably take even longer than this 
TimeoutStopSec=30min
TimeoutStartSec=60s

# Restart options include: no, on-success, on-failure, on-abort or always
Restart=on-failure
