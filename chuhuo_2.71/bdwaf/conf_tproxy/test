# -- Rule engine initialization ----------------------------------------------

# Enable ModSecurity, attaching it to every transaction. Use detection
# only to start with, because that minimises the chances of post-installation
# disruption.
#
#SecRuleEngine DetectionOnly
SecRuleEngine DetectionOnly

# -- Request body handling ---------------------------------------------------

# Allow ModSecurity to access request bodies. If you don't, ModSecurity
# won't be able to see any POST parameters, which opens a large security
# hole for attackers to exploit.
#
SecRequestBodyAccess On


# Enable XML request body parser.
# Initiate XML Processor in case of xml content-type
#
SecRule REQUEST_HEADERS:Content-Type "text/xml" \
     "id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"


# Maximum request body size we will accept for buffering. If you support
# file uploads then the value given on the first line has to be as large
# as the largest file you are willing to accept. The second value refers
# to the size of data, with files excluded. You want to keep that value as
# low as practical.
#
SecRequestBodyLimit 13107200
SecRequestBodyNoFilesLimit 131072

# Store up to 128 KB of request body data in memory. When the multipart
# parser reachers this limit, it will start using your hard disk for
# storage. That is slow, but unavoidable.
#
SecRequestBodyInMemoryLimit 131072

# What do do if the request body size is above our configured limit.
# Keep in mind that this setting will automatically be set to ProcessPartial
# when SecRuleEngine is set to DetectionOnly mode in order to minimize
# disruptions when initially deploying ModSecurity.
#
SecRequestBodyLimitAction Reject

# Verify that we've correctly processed the request body.
# As a rule of thumb, when failing to process a request body
# you should reject the request (when deployed in blocking mode)
# or log a high-severity alert (when deployed in detection-only mode).
#
SecRule REQBODY_ERROR "!@eq 0" \
"id:'200001', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"

# By default be strict with what we accept in the multipart/form-data
# request body. If the rule below proves to be too strict for your
# environment consider changing it to detection-only. You are encouraged
# _not_ to remove it altogether.
#
SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
"id:'200002',phase:2,t:none,log,deny,status:44, \
msg:'Multipart request body failed strict validation: \
PE %{REQBODY_PROCESSOR_ERROR}, \
BQ %{MULTIPART_BOUNDARY_QUOTED}, \
BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
DB %{MULTIPART_DATA_BEFORE}, \
DA %{MULTIPART_DATA_AFTER}, \
HF %{MULTIPART_HEADER_FOLDING}, \
LF %{MULTIPART_LF_LINE}, \
SM %{MULTIPART_MISSING_SEMICOLON}, \
IQ %{MULTIPART_INVALID_QUOTING}, \
IP %{MULTIPART_INVALID_PART}, \
IH %{MULTIPART_INVALID_HEADER_FOLDING}, \
FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'"

# Did we see anything that might be a boundary?
#
SecRule MULTIPART_UNMATCHED_BOUNDARY "!@eq 0" \
"id:'200003',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'"

# PCRE Tuning
# We want to avoid a potential RegEx DoS condition
#
SecPcreMatchLimit 1000
SecPcreMatchLimitRecursion 1000

# Some internal errors will set flags in TX and we will need to look for these.
# All of these are prefixed with "MSC_".  The following flags currently exist:
#
# MSC_PCRE_LIMITS_EXCEEDED: PCRE match limits were exceeded.
#
SecRule TX:/^MSC_/ "!@streq 0" \
        "id:'200004',phase:2,t:none,deny,msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'"


# -- Response body handling --------------------------------------------------

# Allow ModSecurity to access response bodies. 
# You should have this directive enabled in order to identify errors
# and data leakage issues.
# 
# Do keep in mind that enabling this directive does increases both
# memory consumption and response latency.
#
SecResponseBodyAccess On

# Which response MIME types do you want to inspect? You should adjust the
# configuration below to catch documents but avoid static files
# (e.g., images and archives).
#
SecResponseBodyMimeType text/plain text/html text/xml

# Buffer response bodies of up to 512 KB in length.
SecResponseBodyLimit 524288

# What happens when we encounter a response body larger than the configured
# limit? By default, we process what we have and let the rest through.
# That's somewhat less secure, but does not break any legitimate pages.
#
SecResponseBodyLimitAction ProcessPartial


# -- Filesystem configuration ------------------------------------------------

# The location where ModSecurity stores temporary files (for example, when
# it needs to handle a file upload that is larger than the configured limit).
# 
# This default setting is chosen due to all systems have /tmp available however, 
# this is less than ideal. It is recommended that you specify a location that's private.
#
SecTmpDir /tmp/

# The location where ModSecurity will keep its persistent data.  This default setting 
# is chosen due to all systems have /tmp available however, it
# too should be updated to a place that other users can't access.
#
SecDataDir /tmp/


# -- File uploads handling configuration -------------------------------------

# The location where ModSecurity stores intercepted uploaded files. This
# location must be private to ModSecurity. You don't want other users on
# the server to access the files, do you?
#
#SecUploadDir /opt/modsecurity/var/upload/

# By default, only keep the files that were determined to be unusual
# in some way (by an external inspection script). For this to work you
# will also need at least one file inspection rule.
#
#SecUploadKeepFiles RelevantOnly

# Uploaded files are by default created with permissions that do not allow
# any other user to access them. You may need to relax that if you want to
# interface ModSecurity to an external program (e.g., an anti-virus).
#
#SecUploadFileMode 0600


# -- Debug log configuration -------------------------------------------------

# The default debug log configuration is to duplicate the error, warning
# and notice messages from the error log.
#
SecDebugLog /usr/local/bluedon/bdwaf/logs/modsec_debug.log
SecDebugLogLevel 3


# -- Audit log configuration -------------------------------------------------

# Log the transactions that are marked by a rule, as well as those that
# trigger a server error (determined by a 5xx or 4xx, excluding 404,  
# level response status codes).
#
SecAuditEngine RelevantOnly
SecAuditLogRelevantStatus "^(?:5|4(?!04))"

# Log everything we know about a transaction.
SecAuditLogParts "ABIFHZ"

# Use a single file for logging. This is much easier to look at, but
# assumes that you will use the audit log only ocassionally.
#
SecAuditLogType Concurrent
SecAuditLog /usr/local/bluedon/bdwaf/logs/modsec_audit.log

# Specify the path for concurrent audit logging.
SecAuditLogStorageDir /usr/local/bluedon/bdwaf/logs/audit/

# -- Miscellaneous -----------------------------------------------------------

# Use the most commonly used application/x-www-form-urlencoded parameter
# separator. There's probably only one application somewhere that uses
# something else so don't expect to change this value.
#
SecArgumentSeparator &

# Settle on version 0 (zero) cookies, as that is what most applications
# use. Using an incorrect cookie version may open your installation to
# evasion attacks (against the rules that examine named cookies).
#
SecCookieFormat 0

# Specify your Unicode Code Point.
# This mapping is used by the t:urlDecodeUni transformation function
# to properly map encoded data to your language. Properly setting
# these directives helps to reduce false positives and negatives.
#
#SecUnicodeMapFile unicode.mapping 20127

SecDefaultAction phase:1,log,auditlog,deny


#
# -- [[ Global and IP Collections ]] -----------------------------------------------------
#
# Create both Global and IP collections for rules to use
# There are some CRS rules that assume that these two collections
# have already been initiated.
#
SecRule REQUEST_HEADERS:User-Agent "^(.*)$" \
  "id:'900018', \
  phase:1, \
  t:none,t:sha1,t:hexEncode, \
  setvar:tx.ua_hash=%{matched_var}, \
  nolog, \
  pass"


SecRule REQUEST_HEADERS:x-forwarded-for "^\b(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\b" \
  "id:'900019', \
  phase:1, \
  t:none, \
  capture, \
  setvar:tx.real_ip=%{tx.1}, \
  nolog, \
  pass"


SecRule &TX:REAL_IP "!@eq 0" \
  "id:'900020', \
  phase:1, \
  t:none, \
  initcol:global=global, \
  initcol:ip=%{tx.real_ip}_%{tx.ua_hash}, \
  nolog, \
  pass"


SecRule &TX:REAL_IP "@eq 0" \
  "id:'900021', \
  phase:1, \
  t:none, \
  initcol:global=global, \
  initcol:ip=%{remote_addr}_%{tx.ua_hash}, \
  setvar:tx.real_ip=%{remote_addr}, \
  nolog, \
  pass"


## -- limit request header length begin --

# set max length
SecAction "id:'300200',phase:1,t:none,setvar:tx.accept_length=2048,nolog,pass"
SecAction "id:'300201',phase:1,t:none,setvar:tx.accept-charset_length=2048,nolog,pass"
SecAction "id:'300202',phase:1,t:none,setvar:tx.accept-encoding_length=2048,nolog,pass"
SecAction "id:'300203',phase:1,t:none,setvar:tx.cookie_length=32767,nolog,pass"
SecAction "id:'300204',phase:1,t:none,setvar:tx.post_length=10000000,nolog,pass"
SecAction "id:'300205',phase:1,t:none,setvar:tx.uri_length=5000,nolog,pass"
SecAction "id:'300206',phase:1,t:none,setvar:tx.host_length=2048,nolog,pass"
SecAction "id:'300207',phase:1,t:none,setvar:tx.referer_length=2048,nolog,pass"
SecAction "id:'300208',phase:1,t:none,setvar:tx.authorization_length=2048,nolog,pass"
SecAction "id:'300209',phase:1,t:none,setvar:tx.poxy-authorization_length=2048,nolog,pass"
SecAction "id:'300210',phase:1,t:none,setvar:tx.user-agent_length=2048,nolog,pass"


# check max length
SecRule &TX:ACCEPT_LENGTH "@eq 1" "chain,phase:2,t:none,block,msg:'Accept too long',id:'301200',severity:'4',rev:'2',ver:'OWASP_CRS/2.2.9',maturity:'9',accuracy:'9',tag:'OWASP_BD/POLICY/ACCEPT_LIMIT'"
	SecRule REQUEST_HEADERS:Accept "@gt %{tx.accept_length}" "t:none,t:length,setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.notice_anomaly_score},setvar:tx.%{rule.id}-OWASP_BD/POLICY/ACCEPT_LIMIT-%{matched_var_name}=%{matched_var}"
SecRule &TX:ACCEPT-CHARSET_LENGTH "@eq 1" "chain,phase:2,t:none,block,msg:'Accept-Charset too long',id:'301201',severity:'4',rev:'2',ver:'OWASP_CRS/2.2.9',maturity:'9',accuracy:'9',tag:'OWASP_BD/POLICY/ACCEPT-CHARSET_LIMIT'"
	SecRule REQUEST_HEADERS:Accept-Charset "@gt %{tx.accept-charset_length}" "t:none,t:length,setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.notice_anomaly_score},setvar:tx.%{rule.id}-OWASP_BD/POLICY/ACCEPT-CHARSET_LIMIT-%{matched_var_name}=%{matched_var}"
SecRule &TX:ACCEPT-ENCODING_LENGTH "@eq 1" "chain,phase:2,t:none,block,msg:'Accept-Encoding too long',id:'301202',severity:'4',rev:'2',ver:'OWASP_CRS/2.2.9',maturity:'9',accuracy:'9',tag:'OWASP_BD/POLICY/ACCEPT-ENCODING_LIMIT'"
	SecRule REQUEST_HEADERS:Accept-Encoding "@gt %{tx.accept-encoding_length}" "t:none,t:length,setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.notice_anomaly_score},setvar:tx.%{rule.id}-OWASP_BD/POLICY/ACCEPT-ENCODING_LIMIT-%{matched_var_name}=%{matched_var}"
SecRule &TX:COOKIE_LENGTH "@eq 1" "chain,phase:2,t:none,block,msg:'Cookie too long',id:'301203',severity:'4',rev:'2',ver:'OWASP_CRS/2.2.9',maturity:'9',accuracy:'9',tag:'OWASP_BD/POLICY/COOKIE_LIMIT'"
	SecRule REQUEST_HEADERS:Cookie "@gt %{tx.cookie_length}" "t:none,t:length,setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.notice_anomaly_score},setvar:tx.%{rule.id}-OWASP_BD/POLICY/COOKIE_LIMIT-%{matched_var_name}=%{matched_var}"
SecRule &TX:POST_LENGTH "@eq 1" "chain,phase:2,t:none,block,msg:'Post too long',id:'301204',severity:'4',rev:'2',ver:'OWASP_CRS/2.2.9',maturity:'9',accuracy:'9',tag:'OWASP_BD/POLICY/POST_LIMIT'"
	SecRule REQUEST_BODY "@gt %{tx.post_length}" "t:none,t:length,setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.notice_anomaly_score},setvar:tx.%{rule.id}-OWASP_BD/POLICY/POST_LIMIT-%{matched_var_name}=%{matched_var}"
SecRule &TX:URI_LENGTH "@eq 1" "chain,phase:2,t:none,block,msg:'URI too long',id:'301205',severity:'4',rev:'2',ver:'OWASP_CRS/2.2.9',maturity:'9',accuracy:'9',tag:'OWASP_BD/POLICY/URI_LIMIT'"
	SecRule REQUEST_URI "@gt %{tx.uri_length}" "t:none,t:length,setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.notice_anomaly_score},setvar:tx.%{rule.id}-OWASP_BD/POLICY/URI_LIMIT-%{matched_var_name}=%{matched_var}"
SecRule &TX:HOST_LENGTH "@eq 1" "chain,phase:2,t:none,block,msg:'Host too long',id:'301206',severity:'4',rev:'2',ver:'OWASP_CRS/2.2.9',maturity:'9',accuracy:'9',tag:'OWASP_BD/POLICY/HOST_LIMIT'"
	SecRule REQUEST_HEADERS:Host "@gt %{tx.host_length}" "t:none,t:length,setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.notice_anomaly_score},setvar:tx.%{rule.id}-OWASP_BD/POLICY/HOST_LIMIT-%{matched_var_name}=%{matched_var}"
SecRule &TX:REFERER_LENGTH "@eq 1" "chain,phase:2,t:none,block,msg:'Referer too long',id:'301207',severity:'4',rev:'2',ver:'OWASP_CRS/2.2.9',maturity:'9',accuracy:'9',tag:'OWASP_BD/POLICY/REFERER_LIMIT'"
	SecRule REQUEST_HEADERS:Referer "@gt %{tx.referer_length}" "t:none,t:length,setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.notice_anomaly_score},setvar:tx.%{rule.id}-OWASP_BD/POLICY/REFERER_LIMIT-%{matched_var_name}=%{matched_var}"
SecRule &TX:AUTHORIZATION_LENGTH "@eq 1" "chain,phase:2,t:none,block,msg:'Authorization too long',id:'301208',severity:'4',rev:'2',ver:'OWASP_CRS/2.2.9',maturity:'9',accuracy:'9',tag:'OWASP_BD/POLICY/AUTHORIZATION_LIMIT'"
	SecRule REQUEST_HEADERS:Authorization "@gt %{tx.authorization_length}" "t:none,t:length,setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.notice_anomaly_score},setvar:tx.%{rule.id}-OWASP_BD/POLICY/AUTHORIZATION_LIMIT-%{matched_var_name}=%{matched_var}"
SecRule &TX:POXY-AUTHORIZATION_LENGTH "@eq 1" "chain,phase:2,t:none,block,msg:'Poxy-Authorization too long',id:'301209',severity:'4',rev:'2',ver:'OWASP_CRS/2.2.9',maturity:'9',accuracy:'9',tag:'OWASP_BD/POLICY/POXY-AUTHORIZATION_LIMIT'"
	SecRule REQUEST_HEADERS:Poxy-Authorization "@gt %{tx.poxy-authorization_length}" "t:none,t:length,setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.notice_anomaly_score},setvar:tx.%{rule.id}-OWASP_BD/POLICY/POXY-AUTHORIZATION_LIMIT-%{matched_var_name}=%{matched_var}"
SecRule &TX:USER-AGENT_LENGTH "@eq 1" "chain,phase:2,t:none,block,msg:'User-Agent too long',id:'301210',severity:'4',rev:'2',ver:'OWASP_CRS/2.2.9',maturity:'9',accuracy:'9',tag:'OWASP_BD/POLICY/USER-AGENT_LIMIT'"
	SecRule REQUEST_HEADERS:User-Agent "@gt %{tx.user-agent_length}" "t:none,t:length,setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.notice_anomaly_score},setvar:tx.%{rule.id}-OWASP_BD/POLICY/USER-AGENT_LIMIT-%{matched_var_name}=%{matched_var}"


## -- limit request header length end --

## -- limit request method begin --

#
# Set the following policy settings here and they will be propagated to the 30 rules
# file (modsecurity_crs_30_http_policy.conf) by using macro expansion.  
# If you run into false positves, you can adjust the settings here.
#
SecAction \
  "id:'900012', \
  phase:1, \
  t:none, \
  setvar:'tx.allowed_methods=GET POST HEAD OPTIONS DELETE SEARCH PROPFIND CHECKOUT CHECHIN MKCOL PROPPATCH SHOWMETHOD TEXTSEARCH COPY LOCK LINK SPACEJUMP PUT CONNECT MOVE UNLOCK UNLINK TRACK DEBUG UNKNOWN', \
  setvar:'tx.allowed_request_content_type=application/x-www-form-urlencoded|multipart/form-data|text/xml|application/xml|application/x-amf|application/json', \
  setvar:'tx.allowed_http_versions=HTTP/1.0 HTTP/1.1', \
  setvar:'tx.restricted_extensions=', \
  setvar:'tx.restricted_headers=', \
  nolog, \
  pass"

## -- limit request method end --

## deny some url and some ip


Include base_rules/modsecurity_crs_20_protocol_violations.conf
Include base_rules/modsecurity_crs_30_http_policy.conf
Include base_rules/modsecurity_crs_41_sql_injection_attacks.conf
Include base_rules/modsecurity_crs_40_generic_attacks.conf
Include base_rules/modsecurity_crs_41_xss_attacks.conf


Include activated_rules/limits.conf
Include activated_rules/cusrule.conf
Include activated_rules/ccrule.conf
Include activated_rules/selfstudyrule.conf





# selfstudy toggle


# selfstudy result
