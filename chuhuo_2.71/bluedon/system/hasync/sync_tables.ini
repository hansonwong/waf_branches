# sql_where: sql语句条件
# cp_file: 需备份的配置文件
# reboot: 开机恢复
# init: 恢复出厂设置
# relation_tb: 关联的表


# ----- 自定义对象 -----
# ip
[m_tbaddress_list]
relation_tb = ["m_tbSearitystrate", "m_tbDnat", "m_tbSnat", "m_tbdipcon", "m_tbsipcon", "m_tbflow_socket", "m_tbusers_authentication_tactics", "m_tburl_filter", "m_tbips", "m_tbFileFilter"]

# ip组
[m_tbaddressgroup]
relation_tb = ["m_tbSearitystrate", "m_tbDnat", "m_tbSnat", "m_tbdipcon", "m_tbsipcon", "m_tbflow_socket", "m_tbusers_authentication_tactics", "m_tburl_filter", "m_tbips", "m_tbFileFilter"]
reboot = ["python -m objectdefine.set_ipgroup reboot"]
init = ["python -m objectdefine.set_ipgroup init"]

# isp地址
[m_tbaddress_isp]

# 服务/组
[m_tbservices_list]
relation_tb = ["m_tbSnat", "m_tbDnat"]

[m_tbservice_group]

[m_tbpredefined]

# url类型组
[m_tburlgroup]
relation_tb = ["m_tburl_filter"]
reboot = ["python -m objectdefine.url_group reboot"]
init = ["python -m objectdefine.url_group init"]

# 文件类型组
[m_tbfiletypegroup]
relation_tb = ["m_tbFileFilter"]

# 文件类型, ddos, 病毒防护, 用户认证开关
[m_tbconfig]
sql_where = ["where sName='sFileTypes' or sName='DDosSetting' or sName='EvilProtectedSet' or sName='UserStrategy' or sName='TimeSet' or sName='IPMacBind' or sName='IPMacExip';"]
reboot = ["python -m firedam.ddos reboot",
          "python -m usermanage.tactics onoff_reboot",
          "python -m safetydefend.filter",
          "python -m firedam.ipmac start_stop",
          "python -m firedam.ipmac exception_ip"]
init = ["python -m firedam.ddos init"]

# 时间计划
[m_tbtimeplan_single]
relation_tb = ["m_tbSearitystrate", "m_tbflow_socket", "m_tburl_filter"]

[m_tbtimeplan_loop]
relation_tb = ["m_tbSearitystrate", "m_tbflow_socket", "m_tburl_filter"]

# 自定义ISP规则库
[m_tbcustom_ips_lib]
reboot = ["python -m safetydefend.IPS_defined"]

# WEB应用防护规则库
[m_tbwebapplication_lib]
reboot = ["python -m safetydefend.web"]


# ----- 防火墙 -----
# 安全策略(要不要过滤网口)
[m_tbSearitystrate]
relation_tb = ["m_tbflow_socket"]
reboot = ["python -m firedam.safe_tactics reboot"]
init = ["/usr/sbin/iptables -F SECURITYPOLICY", "/usr/sbin/ip6tables -F SECURITYPOLICY"]

# nat(要不要过滤网口)
[m_tbDnat]
reboot = ["python -m firedam.nat reboot"]
init = ["/usr/sbin/iptables -t nat -F FWDNAT", "/usr/sbin/ip6tables -t nat -F FWDNAT"]

[m_tbSnat]
reboot = ["python -m firedam.nat reboot"]
init = ["/usr/sbin/iptables -t nat -F FWSNAT", "/usr/sbin/ip6tables -t nat -F FWSNAT"]

# 连接数控制
[m_tbsipcon]
reboot = ["python -m firedam.connlimit"]
init = ["/usr/sbin/iptables -F CONNLIMIT_SRC"]

[m_tbdipcon]
reboot = ["python -m firedam.connlimit"]
init = ["/usr/sbin/iptables -F CONNLIMIT_DST"]

# ddos

# 会话管理

# IP-MAC绑定配置
[m_tbip_mac]
reboot = ["python -m firedam.ipmac bind_ipmac"]
#init = ["python -m firedam.ipmac bind_ipmac"]

[m_tbip_mac_defined]

# 联动


# ----- 安全防护 -----
# url过滤
[m_tburl_filter]
reboot = ["python -m safetydefend.url_filter reboot"]
init = ["python -m safetydefend.url_filter init"]

# 入侵防护
[m_tbips]
relation_tb = ["m_tbips_template"]
reboot = ["python -m safetydefend.IPS_defined"]

[m_tbips_template]
relation_tb = ["m_tbips"]

# web应用防护
[m_tbwebapplication_strategy]
relation_tb = ["m_tbwebapplication_protected"]
reboot = ["python -m safetydefend.web"]

[m_tbwebapplication_protected]
relation_tb = ["m_tbwebapplication_strategy"]

# 病毒防护

# 信息泄露防护
[m_tbKeywordFilter]
reboot = ["python -m safetydefend.keyword_filter", "python -m safetydefend.filter"]

[m_tbFileFilter]
reboot = ["python -m safetydefend.file_filter"]

# ----- 用户管理 -----
[m_tbgroup]
relation_tb = ["m_tbflow_socket", "m_tbusers"]
reboot = ["python -m usermanage.user_group reboot"]
init = ["python -m usermanage.user_group init"]

[m_tbusers]
relation_tb = ["m_tbflow_socket", "m_tbgroup"]
reboot = ["python -m usermanage.user_group reboot"]
init = ["python -m usermanage.user_group init"]

[m_tbusers_authentication_tactics]
reboot = ["python -m usermanage.tactics reboot"]
init = ["python -m usermanage.tactics init"]

[m_tbusers_out_authentication]
reboot = ["python -m usermanage.tactics reboot"]
init = ["python -m usermanage.tactics init"]

# ----- 流量管理 -----
# 虚拟线路(需不需同步网口)
[m_tbflow_virtualline]
relation_tb = ["m_tbflow_socket"]
reboot = ["python -m flowmanage.flow_manage reboot"]
init = ["python -m flowmanage.flow_manage init"]

# 通道配置
[m_tbflow_socket]
relation_tb = ["m_tbSearitystrate"]
reboot = ["python -m flowmanage.flow_manage reboot"]
init = ["python -m flowmanage.flow_manage init"]

[m_tbkeyword_webcontent]
reboot = ["python -m safetydefend.web_content_keyword"]

[m_tbnetport]
reboot = ["python -m firedam.ipmac exception_nic"]
# 由于策略路由应用需打mark
#[m_tbstrategyroute]
#relation_tb = ["m_tbSearitystrate","m_tbflow_socket"]
#reboot = ["python -m networking.config_strategy_route reboot"]
#init = ["python -m networking.config_strategy_route init"]

# SSLVPN
[m_tbsslvpn_setting]
relation_tb = ["m_tbbdvpn_ssl_service", "m_tbbdvpn_ssl_sservice_port", "m_tbbdvpn_ssl_group", \
               "m_tbbdvpn_ssl_user", "m_tbbdvpn_ssl_mid_group_service", "m_tbbdvpn_ssl_mid_user_group", \
               "m_tbbdvpn_ssl_mid_user_service"]

reboot = ["python /usr/local/bluedon/sslvpn/sslvpn.py boot_recover"]
# init = ["python /usr/local/bluedon/sslvpn/sslvpn.py boot_recover"]
master_init = ["python /usr/local/bluedon/sslvpn/sslvpn.py boot_recover"]

[m_tbbdvpn_ssl_service]

[m_tbbdvpn_ssl_sservice_port]

[m_tbbdvpn_ssl_group]

[m_tbbdvpn_ssl_user]

[m_tbbdvpn_ssl_mid_group_service]

[m_tbbdvpn_ssl_mid_user_group]

[m_tbbdvpn_ssl_mid_user_service]

# 需同步的文件
[files]
cp_file = ["/usr/local/bluedon/conf/online_users", "/usr/local/bluedon/conf/del_users"]

# waf同步表

# waf引擎设置
[waf.t_baseconfig]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# 站点组管理
[waf.t_website]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]
[waf.t_website_servers]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]
[waf.t_reverporxy]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# 站点组
[waf.t_website_group]

# 内置规则
[waf.t_rules]
relation_tb = ["waf.t_rule_model"]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# 自定义规则
[waf.t_customrules]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# 访问控制
[waf.t_baseaccessctrl]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# http防溢出
[waf.t_overflowset]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# http请求动作
[waf.t_httptypeset]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# http请求内容
[waf.t_httprequesttype]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# http协议版本
[waf.t_httpver]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# HTTP头字段
[waf.t_restrictheaders]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# 文件扩展名
[waf.t_restrictext]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# 服务器信息隐藏 防盗链设置 爬虫防护设置 智能阻断设置 bypass
[waf.t_securityset]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# 防误报设置
[waf.t_selfstudyrule]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# ddos防护
[waf.t_ddosset]
reboot = ["echo CMD_DDOS >> /tmp/bdwaf.fifo"]

# cc防护
[waf.t_ccset]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# 自学习设置
[waf.t_selfstudy_setting]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# 自学习白名单
[waf.t_selfstudy_ip_white]

# 自学习结果
[waf.t_selfstudy_result]

# 非法外联检测
[waf.t_webserver_outbound]

# 非法外联设置
[waf.t_webserver_outbound_port]
reboot = ["echo CMD_WEBOUTRULE >> /tmp/bdwaf.fifo"]

# 可用性监测
[waf.t_sitestatus]

# 漏洞扫描
[waf.t_scantask]

# 返回页面设置
[waf.t_errorlist]
reboot = ["echo CMD_NGINX >> /tmp/bdwaf.fifo"]

# 网页防篡改
[waf.t_webguard]

# 接入控制
[waf.t_blackandwhite]
reboot = ["echo CMD_BAW >> /tmp/bdwaf.fifo"]
