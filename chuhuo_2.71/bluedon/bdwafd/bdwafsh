#!/usr/bin/env python
#coding:utf-8

import os
import getpass
import re
from cmd import Cmd

PIPEFILE = '/tmp/bdwaf.fifo'

class bdwafConsole(Cmd):
    def __init__(self):
        Cmd.__init__(self)
        self.prompt = 'BDWAF>> '
        self.intro = '欢迎使用'

    def help_setIp(self):
        print '''配置eth0网口信息
Usage:      setIp [destination]
exmaple 1:  setIp  ;缺省IP 192.168.0.1
exmaple 2:  setIp 172.16.8.88'''

    def do_setIp(self, ip):
        ip = ip or '192.168.0.1'
        reip = re.compile("^((?:(2[0-4]\d)|(25[0-5])|([01]?\d\d?))\.){3}(?:(2[0-4]\d)|(255[0-5])|([01]?\d\d?))$")
        if not reip.search(ip):
            print 'The IP address error'
        else:    
            print 'setIp eth0 whith ip %s'%ip
            os.system('sudo ifconfig eth0 %s netmask 255.255.255.0'%ip)
    
    def help_ipcheck(self):
        print '''检查ip配置信息
Usage:      ipcheck'''

    def do_ipcheck(self, line):
        print  os.popen('ifconfig').read()
    
    def help_resetPwd(self):
        print '''修改conadmin密码
Usage: resetPwd [username]'''
    
    def do_resetPwd(self, line):
        if not line:
            print 'Usage: resetPwd [username]'
        path = '/usr/local/bluedon/bdwafd'
        #path = '/home/samba/waf/bdwafd'
        result = os.popen('python %s/changeUserPad.py -username %s -passwd'%(path, line)).read().strip()
        if result != '1': 
            print "Can not search this user, please check your parameter!"
        else:
            new_passw1 = getpass.getpass('New password: ')
            new_passw2 = getpass.getpass('Retype new password: ')
            if new_passw1 != new_passw2:
                print "Sorry, passwords do not match."
            else:
                result = os.popen('python %s/changeUserPad.py -username %s -passwd %s'%(path, line, new_passw2)).read().strip()
                if result == '1':
                    print 'Password reset successfully!'
                else:
                    print "Password reset faile!"

    def help_ping(self):
        print '''标准linux 命令
Usage:      ping destination
exmaple:    ping 192.168.0.2'''
    
    def do_ping(self, line):
        if not line:
            print '''Usage:      ping destination
exmaple:    ping 192.168.0.2'''
        else:
            print  os.popen('ping -c 3 %s'%line).read()

    def help_route(self):
        print '''标准linux 命令'''
    
    def do_route(self, line):
        print os.popen('route %s'%line).read()
    
    def help_arp(self):
        print '''查看apr信息'''
    
    def do_arp(self, line):
        print os.popen('arp -a').read()
    
    def help_traceroute(self):
        print '''标准linux 命令'''
    
    def do_traceroute(self, line):
        print os.popen('traceroute %s'%line).read()
    
    def help_resetSys(self):
        print '''复位操作（密码恢复出厂设置）
Usage: resetSys
Restore the system to factory Settings.'''
    
    def do_resetSys(self, line):
        SURE = raw_input('Restore the system[Y/N]: ')
        if 'Y' == SURE:
            print 'reset operation'
            os.system('echo "CMD_SYSTOOL|reset" >> %s'%PIPEFILE)
     
    def help_restart(self):
        print '''重启系统'''
    
    def do_restart(self, line):
        os.system('sudo reboot')

    def help_halt(self):
        print '''标准linux 命令'''

    def do_halt(self, line):
        os.system('halt')
    
    def help_listcmd(self):
        print '''显示所有命令和参数
Usage:      listcmd'''
    
    def do_listcmd(self, line):
        print '''setIp  [destination]          配置eth0网口信息; 参数destination:待配置的IP
ipcheck                       检查ip配置信息
resetPwd                      修改conadmin密码
ping                          标准linux 命令
route                         标准linux 命令
arp                           查看apr信息
traceroutte                   标准linux 命令
resetSys                      复位操作（密码恢复出厂设置）
restart                       重启系统
halt                          标准linux 命令
listcmd                       显示所有命令和参数
ssh                           打开/关闭ssh服务
help xxx                      显示一条命令的用法;参数xxx: 以上的一条命令'''

    def help_ssh(self):
        print '''打开/关闭ssh服务
Usage:      ssh on/off'''

    def do_ssh(self, line):
        if line not in ['on', 'off']:
            print 'Usage:      ssh on/off'
        if line == 'off':
            os.system('/etc/init.d/ssh stop')
            os.system('/etc/init.d/ssh stop')
        if line == 'on':
            os.system('/etc/init.d/ssh start')

    def emptyline(self):
        self.do_listcmd('')

if __name__ == "__main__":
    cmd = bdwafConsole()
    cmd.cmdloop()
