#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import subprocess
import threading
import time
from commands import getoutput
from config import config
from logging import getLogger
from common import blackandwhite
from db import Dns, Website, conn_scope, session_scope
from gencert import decryptModConfFile, varify_cert
from generrorpage import gen_errorpage
from nginx import NginxConfGenerator
from send_support import send_support_mail
from sysinfo_tables import WafSessionManager
from config_iptables import init_reverseproxy_iptables, init_iptables
from deploymode import switch_bdwaf, config_bypass, write_port_conf, restart_bdwaf
from ipfilter import ipfilter_set


def proc_nginx(args=None):
    init_reverseproxy_iptables()
    switch_bdwaf()


def proc_port(args=None):
    '''检测端口'''
    write_port_conf()
    init_iptables()


def proc_systool(args):
    if args[0].lower() == 'reboot':
        os.system('reboot')
    elif args[0].lower() == 'halt':
        os.system('poweroff')
    elif args[0].lower() == 'reset':
        getLogger('main').info('reset begin.')
        os.system("mysql -u%s --password='%s' -e 'source data/waf.sql'"
                  % (config['db']['user'], config['db']['passwd']))
        switch_bdwaf()
        getLogger('main').info('reset end.')
        os.system('reboot')
    elif args[0].lower() == 'dns':
        with session_scope() as session:
            dns = session.query(Dns).one()
            if not dns.first and not dns.second:
                getLogger('main').warning('dns not set.')
                return
            with open('/etc/resolv.conf', 'w') as fp:
                if dns.first:
                    fp.write('nameserver %s\n' % dns.first)
                if dns.second:
                    fp.write('nameserver %s\n' % dns.second)
    elif args[0].lower() == 'email':
        pass


def proc_time(args):
    os.system("date -s '%s'" % args[0])


def proc_updaterule(args):
    # args[0] is a relative path
    abspath = config["adminwww"] + args[0]
    for modsecruledir in config['modsecruledir']:
        decryptModConfFile(abspath, modsecruledir)
    switch_bdwaf()
    getLogger('main').debug('rule file decrypted')


def proc_updatecert(args):
    # args[0] is a relative path
    abspath = config["adminwww"] + args[0]
    varify_cert(abspath)
    getLogger('main').info('lisence viryfied')


def proc_exit(args):
    pass


def proc_reflash_nic(args=None):
    pass

def proc_licensefile(args):
    sess = WafSessionManager()
    sess.UpdateLicenseFile(args[0])

def proc_tar_systeminfo(args):
    getLogger('main').info('tar systeminfo begin')
    os.system('/usr/local/bluedon/bdwafd/sysinfo_collect_encrypt.sh')
    getLogger('main').info('tar systeminfo end')


def proc_tar_systeminfo_send(args):
    send_support_mail()


def proc_tar_sysconfig(args):
    os.system('rm /tmp/sysconfig.sql')
    os.system("echo 'use waf;' >> /tmp/sysconfig.sql")
    os.system("mysqldump -u%s --password='%s' -e waf >> /tmp/sysconfig.sql" % (config['db']['user'], config['db']['passwd']))
    os.system('openssl enc -aes-256-cbc -in /tmp/sysconfig.sql -out /tmp/sysconfig.data -pass pass:bdwafconfig')
    os.system('rm /tmp/sysconfig.sql')
    os.system('mv /tmp/sysconfig.data /var/wafDownload/web/cache/')


def proc_sitescan(args):
    from bdwafd import BDWafd
    if args[1] == '1':    # start
        BDWafd.app.scantask.starttask(args[0])
    elif args[1] == '0':  # del
        BDWafd.app.scantask.deltask(args[0])
    elif args[1] == '3':  # stop
        BDWafd.app.scantask.stoptask(args[0])


def proc_ddos(args):
    action = args[0] if args else ''
    cmdstr = 'python /usr/local/bluedon/bdwafd/wafddos.py %s' % action
    os.system(cmdstr)


def proc_ssl_licence(args):
    if len(args) != 3:
        getLogger('main').error('cmd_ssl_licence except 3 argument.')
        return
    host = args[0]
    if len(args[1]) > 0:
        publ = args[1]
    if len(args[2]) > 0:
        privl = args[2]

    if not host or not os.path.isfile(publ) or not os.path.isfile(privl):
        getLogger('main').error('licence file "%s" or "%s" not exists.' % (publ, privl))
        return
    d = '/usr/local/bdwaf/conf_proxy/licences/%s' % host
    try:
        # os.mkdir(d)
		# 确保创建的路径有777权限（bdwaf账号创建的文件能正常移动到目的路径）
        # 创建777属性的路径
        os.mkdir(d)
        os.system("chmod 777 %s" % d)
    except OSError, e:
        getLogger('main').error(e)
    os.rename(publ, os.path.join(d, 'ssl.pem'))
    os.rename(privl, os.path.join(d, 'ssl.key'))


def proc_sysconfig_restore(args):
    # print "print args...", args
    if len(args) != 1:
        getLogger('main').error('cmd_sys_update except 3 argument.')
        return
    if len(args[0]) > 0 and args[0][0] == '/':
        filepath = os.path.join(config["adminwww"], args[0][1:])
    else:
        filepath = os.path.join(config["adminwww"], args[0])
    if not os.path.isfile(filepath):
        getLogger('main').error('sys config file "%s" not exists.' % (filepath))
        return
    # print "filepath...", filepath
    getLogger('main').info('sys config restore begin.')
    os.system('openssl enc -d -aes-256-cbc -in %s -out %s -pass pass:bdwafconfig' % (filepath,'/tmp/sysconfig.sql'))
    os.system("mysql -u%s --password='%s' -e 'source %s'" % (config['db']['user'], config['db']['passwd'], '/tmp/sysconfig.sql'))
    os.system('rm %s' % (filepath,))
    os.system('rm %s' % ('/tmp/sysconfig.sql',))
    switch_bdwaf()
    # os.system("python /usr/local/bluedon/bdwafd/waf_recover.py")
    os.system('systemctl restart firewall-python-init')
    getLogger('main').info('sys config restore done.')


def proc_sys_update(args):
    updatepath = '/var/update/'
    if not os.path.exists(updatepath):
        os.mkdir(updatepath)
    if len(args) != 1:
        getLogger('main').error('cmd_sys_update except 3 argument.')
        return
    if len(args[0]) > 0 and args[0][0] == '/':
        filepath = args[0]
    if not os.path.isfile(filepath):
        getLogger('main').error('sys update file "%s" not exists.' % (filepath))
        return
    filename = os.path.basename(filepath).split('.')[0]
    
    getLogger('main').info('sys update begin.')
    os.system('mv %s %s' % (filepath, updatepath))
    os.chdir(updatepath)
    text = getoutput('tar xvf %s.tar'%filename)
    if os.path.isfile('%s%s/patch.py'%(updatepath, filename)):
        getLogger('main').info('patch.py got.')
        os.chdir('%s%s/'%(updatepath,filename))
        ret = getoutput('python %s%s/patch.py'%(updatepath,filename))
        getLogger('main').info(ret)
    getLogger('main').info('sys update done.')


def proc_bypass(args=None):
    if args:
        config_bypass(args[0])
        restart_bdwaf()


def modify_syslog(args=None):
    os.system('python /usr/local/bluedon/bdwafd/config_syslog.py')


def setucarp(args):
    cmdstr = 'python /usr/local/bluedon/bdwafd/bducarp.py '
    if len(args):
        cmdstr += args[0]
    os.system(cmdstr)


def weboutrule(args):
    os.system('python /usr/local/bluedon/bdwafd/weboutlog.py')


def initsnmptrap(args):
    os.system('python /usr/local/bluedon/bdwafd/snmptrap.py')


def proc_timeupdate(args):
    os.system('python /usr/local/bluedon/bdwafd/bdntpdate.py')


def proc_setvlan(args=None):
    os.system('python /usr/local/bluedon/bdwafd/bdsetvlan.py')


def proc_bridgemulip(args):
    os.system('python /usr/local/bluedon/bdwafd/bridgemultipleIP.py')


def proc_clear_disk(args):
    getLogger('main').info('proc_clear_disk start')
    import datetime
    from cleardisk import clearbiglogs, clearmsclog
    from db import SecuritySet, row2dict, session_scope
    import psutil
    #清除日志文件
    clearbiglogs()
    clearmsclog()
    #如果清理日志文件之后硬盘还没有达到阀值以下，清除当天的日志
    try:
        with session_scope() as session:
            securityset = row2dict(session.query(SecuritySet).one())
        parts = psutil.disk_partitions()
        total, used = 0, 0
        for part in parts:
            disk = psutil.disk_usage(part.mountpoint)
            total += disk.total
            used += disk.used
        percent = float(used)/float(total)*100
        if securityset['autodiskclean'] < percent:
            getLogger('main').info('proc_clear_disk autodiskclean more than percent')
            clearmsclog(datetime.date.today())
    except Exception, e:
        getLogger('main').exception(e)
    getLogger('main').info('proc_clear_disk finish')    


#高可用，同步系统配置
def proc_use_sysconfig_restore(args=None):
    switch_bdwaf()


def proc_ssh(args=None):
    with conn_scope(**config['db']) as (conn, cursor):
        cursor.execute('SELECT wafssh from waf.t_wafssh limit 1')
        result = cursor.fetchall()[0][0]
        if result == 'On':
            os.system('service ssh start')
        else:
            os.system('service ssh stop')


def proc_cuckoo_socket(args):
    #print "path:", args[0]
    # import socket
    # data = "/usr/local/bluedon/bdwafd/kugou8051.exe"
    # target_host = "176.16.2.155"
    # target_port = 33346
    # c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # c.connect_ex((target_host, target_port))
    # c.send(data)
    # response = c.recv(4096)
    # print response
    # print "OK"
    os.system('python /usr/local/bluedon/bdwafd/cuckoo_client.py %s' % args[0])
    #os.system("python /usr/local/bluedon/bdwafd/cuckoo_client.py")


def conf_guide(args):
    """
    配置向导    
    :param args: 接收到的json数据 
    :return: 
    """
    subprocess.Popen("python /usr/local/bluedon/bdwafd/confguide.py '%s' " % args[0], shell=True)

    
def proc_save_guide(args=None):
    """保留配置想向导下发的配置"""
    if os.popen("ps aux|grep confguide.py|grep -v grep").read():
        fp = open("guide_single.txt", "w")
        fp.close()


def proc_errorpage(args):
    if len(args) == 1:
        gen_errorpage(args[0])


def proc_ipfilter(args):
    ipfilter_set(args)


commands = {
            'CMD_NGINX': proc_nginx,
            'CMD_TIME': proc_time,
            'CMD_SYSTOOL': proc_systool,
            'CMD_UPDATERULE': proc_updaterule,
            'CMD_UPDATECERT': proc_updatecert,
            'CMD_TAR_SYSTEMINFO': proc_tar_systeminfo,
            'CMD_SITESCAN':proc_sitescan,
            'CMD_DDOS': proc_ddos,
            'CMD_PORT': proc_port,
            'CMD_SSL_LICENCE': proc_ssl_licence,
            'CMD_EXIT': proc_exit,
            'CMD_WEBOUTRULE': weboutrule,
            'CMD_BYPASS': proc_bypass,
            'CMD_SYS_UPDATE': proc_sys_update,
            'CMD_TAR_SYSCONFIG': proc_tar_sysconfig,
            'CMD_SYSCONFIG_RESTORE': proc_sysconfig_restore,
            'CMD_TIMEUPDATE' : proc_timeupdate,
            'CMD_TAR_SYSTEMINFO_SEND': proc_tar_systeminfo_send,
            'CMD_BRIDGE_MULIP':proc_bridgemulip,
            'CMD_CLEAR_DISK' : proc_clear_disk,
            'CMD_USE_SYSCONFIG_RESTORE': proc_use_sysconfig_restore,
            'CMD_SSH': proc_ssh,
            'CMD_CUCKOO_FILE': proc_cuckoo_socket,
            'CMD_BAW': blackandwhite,
            'CMD_SAVE_GUIDE': proc_save_guide,
            'CMD_GEN_ERRORPAGE': proc_errorpage,
            'CMD_IPFILTERSET': proc_ipfilter,
            }

class TaskProcessor(threading.Thread):
    ''' 任务发布器 '''

    event = threading.Event()
    tasks = set()

    def __init__(self, ):
        super(TaskProcessor, self).__init__(name = self.__class__.__name__)

    def start(self):
        getLogger('main').debug(self.__class__.__name__+ ' starting...')
        super(TaskProcessor, self).start()
        getLogger('main').info(self.__class__.__name__+ ' started.')

    def stop(self):
        getLogger('main').debug(self.__class__.__name__+ ' Exiting...')
        self.event.set()
        self.join()
        getLogger('main').info(self.__class__.__name__+ ' Exited.')

    def add(self, task):
        self.tasks.add(task)

    def run(self):
        while 1:
            try:
                time.sleep(1)
                if self.event.isSet():
                    return
                while self.tasks:
                    args = filter(lambda x: x, map(lambda x: x.strip(), self.tasks.pop().split('|')))
                    if args:
                        com=commands[args[0]](args[1:])
                        print com
            except Exception, e:
                getLogger('main').exception(e)

class TaskDispatcher(threading.Thread):
    ''' 任务发布器 '''

    fifo_path = ''
    event = threading.Event()
    processor = None

    def __init__(self, processor, fifo='/tmp/bdwaf.fifo'):
        super(TaskDispatcher, self).__init__(name = self.__class__.__name__)
        self.fifo_path = fifo
        self.processor = processor

    def start(self):
        getLogger('main').debug(self.__class__.__name__+ ' starting...')
        super(TaskDispatcher, self).start()
        getLogger('main').info(self.__class__.__name__+ ' started.')

    def stop(self):
        getLogger('main').debug(self.__class__.__name__+ ' Exiting...')
        self.event.set()
        os.system('echo "CMD_EXIT" >> /tmp/bdwaf.fifo')
        self.join()
        getLogger('main').info(self.__class__.__name__+ ' Exited.')

    def run(self):
        # from bdwafd import BDWafd
        while 1:
            try:
                time.sleep(1)
                os.system('/usr/local/bluedon/bdwafd/try_make_fifo.sh')
                with open(self.fifo_path) as fp:
                    while 1:
                        time.sleep(1)
                        if self.event.isSet():
                            return
                        lines = fp.readlines()
                        for line in lines:
                            cmds = line.split("$")
                            if cmds[0] != 'Rep':
                                pass
                                # BDWafd.app.cmdreplication.startReplication(line)
                            else:
                                line = cmds[1]
                            getLogger('webtask').info(line.strip())
                            self.processor.add(line.strip())
            except Exception, e:
                getLogger('main').exception(e)
