<?php

namespace app\models;

use Yii;
use \yii\helpers\Url;
use app\widget\AdminListConfig;
use app\logic\model\BaseModel;
use app\logic\model\tools\SelectList;
use app\logic\waf\common\WafRuleModel;

/**
 * This is the model class for table "t_customrules".
 *
 * @property integer $id
 * @property integer $realid
 * @property integer $priority
 * @property string $name
 * @property string $desc
 * @property string $severity
 * @property string $action
 * @property integer $status
 * @property integer $httpdata
 * @property string $httptype
 * @property string $matchdata
 * @property integer $matchalgorithm
 * @property string $keywords
 * @property string $type
 */
class RulesCustom extends BaseModel
{
    public $sendPipe = true;

    public static function tableName()
    {
        return 't_customrules';
    }

    public function rulesSource()
    {
        return [
            //matchdata复选处理
            [['matchdata'], 'filter', 'filter' => function($value){
                return is_array($value) ? implode('|', $value) : $value;
                #return json_encode($value);
            }],
            //插入模式下执行realid分配
            [['realid'], 'filter', 'filter' => function($value){
                $realIdMax = self::find()->max('realid');
                $realid = $realIdMax?$realIdMax+1:330001;
                if( $realid>349999 ){ //330000 - 349999
                    $info = $this->translate->getTranslateBySymbol('eyondTheLimitContactTechnician'); //'超出限制,请联系技术员解决.';
                    Yii::$app->sysJsonMsg->msg('F', $info);
                }
                return $realid;
            }, 'on' => 'create'],

            [['priority'], 'default', 'value' => 1],
            [['httptype'], 'default', 'value' => '*'],
            [['realid', 'name', 'keywords', 'matchdata', 'severity', 'action', 'status', 'httptype'], 'required'],
            [['realid', 'priority', 'status', 'httpdata', 'matchalgorithm'], 'integer'],
            [['name'], 'string', 'max' => 140],
            [['desc', 'keywords'], 'string', 'max' => 1024],
            [['severity', 'action', 'httptype'], 'string', 'max' => 45],
            [['matchdata'], 'string', 'max' => 128],
            [['type'], 'string', 'max' => 100],
            [['realid', 'name'], 'unique'],
        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if($this->sendPipe) Yii::$app->wafHelper->pipe('CMD_NGINX');
    }

    public function attributeLabelsSource()
    {
        return [
            'headTitle1' => '规则基本信息',
            'id' => 'ID',
            'realid' => '规则ID',
            'priority' => '优先级',
            'name' => '规则名称',
            'desc' => '说明',
            'severity' => '危害等级',
            'action' => '拦截方式',
            'status' => '启用状态',
            'httpdata' => 'HTTP数据类型',
            'httptype' => 'HTTP请求类型',
            'headTitle2' => '特征生成',
            'matchdata' => '匹配内容',
            'matchalgorithm' => '匹配算法',
            'keywords' => '特征关键字',
            'type' => '攻击类型',
        ];
    }

    public function search($params)
    {
        $query = $this->find();
        $this->load($params);
        $this->searchFilterHelper($query, $this, [
            '=' => ['severity', 'action', 'httptype', 'status'],
            '~' => ['name',],
        ]);
        return ['query' => $query];
    }

    public function ListSearch()
    {
        return [
            'field' => [
                'name',
                'severity' => SelectList::wafSeverityArr('select'),
                'action' => SelectList::wafActionCatArr('select'),
                'httptype' => SelectList::wafHttpTypeSetArr('select'),
                'status' => SelectList::enable('select'),
            ],
            'key' => $this->modelName,
            'model' => $this,
        ];
    }

    public function ListTable()
    {
        $enable = Yii::$app->sysLanguage->getTranslateBySymbol('enable');
        $stopUse = Yii::$app->sysLanguage->getTranslateBySymbol('stopUse');
        $copy = Yii::$app->sysLanguage->getTranslateBySymbol('copy');

        $js = \Yii::$app->view->renderFile('@app/views/rule-custom-defend-policy/list-component.php');
        $js .= \Yii::$app->view->renderFile('@app/views/rule-custom-defend-policy/list-component.php',[
            'config' => ['url' => 'copy-rules', 'jsFuntionName' => 'copyRules']
        ]);
        return [
            'publicButton' => [
                ['button' => "<input type=button class='btn c_g btn_addrep' value='{$copy}' onclick='copyRules();'>", 'authorityPass' => true],
                ['button' => "<input type=button class='btn c_b btn_open' value='{$enable}' onclick='statusChange(0, 1);'>", 'authorityPass' => true],
                ['button' => "<input type=button class='btn c_o btn_stop' value='{$stopUse}' onclick='statusChange(0, 0);'>", 'authorityPass' => true],
            ],
            'field' => ['name', 'priority', 'desc',
                'action' => ['float' => 'c', 'type' => 'switch', 'val' => SelectList::wafActionCatArr('switch')],
                'status' => ['type' => 'callback', 'val' => function($obj, $val){
                    $class = (1 == $val) ? 'bt_qyan' : 'bt_tyan';
                    $str =  (1 == $val) ? 'enable' : 'stopUse';
                    $status = 1 == $val ? 0 : 1;
                    $str = Yii::$app->sysLanguage->getTranslateBySymbol($str);
                    return "<input type=button class='qt {$class}' onclick='statusChange({$obj['id']}, {$status});' title='{$str}'>";
                }],
            ],
            'model' => $this,
            'customStr' => $js,
        ];
    }

    public function ListField()
    {
        $type = AdminListConfig::ListFieldScenarios('common', $this);
        $fieldKey = $this->modelName;

        $fieldType = [
            'id' => ['showType' => 'hidden'],
            'realid' => ['showType' => 'hidden'],
            'type' => ['showType' => 'notShow'],
            'httpdata' => ['showType' => 'notShow'],
            'severity' => SelectList::wafSeverityArr('select'),
            'action' => SelectList::wafActionCatArr('select'),
            'httptype' => SelectList::wafHttpTypeSetArr('select'),
            'status' => SelectList::enable('select'),
            'desc' => ['type' => 'textarea', 'length' => 0, 'height' => '100px'],
            'keywords' => ['type' => 'textarea', 'length' => 0, 'height' => '100px'],
            'matchalgorithm' => SelectList::matchingAlgorithmForStr('select'),
            'matchdata' => array_merge(
                AdminListConfig::returnSelect('checkbox', ['URI' => 'URI', 'POST' => 'POST', 'COOKIE' => 'COOKIE',]),
                ['labelWidth' => '100px', 'rowStyle' => 2, 'valSplit' => '|']
            ),
            'priority' => [
                'tipsTKey' => 'smallerValueAndGreaterPriority',
            ],
        ];
        $field = [
            'fieldKey' => $fieldKey,
            'field' => $this->attributeLabels(),
            'fieldType' => $fieldType,
            'customStr' => false,
        ];
        switch ($type) {
            case 'create' :
                break;
            case 'update' :
                break;
            default :
                ;
        }
        return $field;
    }


    public static function updateStatus(){
        $model = new self;
        $query = Yii::$app->request->bodyParams;
        $id = $query['id'];
        $status = $query['status'];
        if(!is_array($id)) return false;
        foreach ($id as $item) {
            if ('' != $item) {
                $obj = $model->findOne($item);
                $obj->sendPipe = false;
                $obj->status = $status;
                $obj->save(false);
            }
        }
        Yii::$app->wafHelper->pipe('CMD_NGINX');
        Yii::$app->sysJsonMsg->msg(true, '', false);
    }

    public static function copyRules(){
        $model = new self;
        $modelCopy = new self;
        $modelCopy->setScenario('create');
        $query = Yii::$app->request->bodyParams;
        $id = $query['id'];
        $time = time();
        if(!is_array($id)) return false;
        foreach ($id as $item) {
            if ('' != $item) {
                $obj = $model->findOne($item);
                $attr = $obj->attributes;

                $attr['name'] = "copy:{$time}:{$attr['name']}";
                unset($attr['id']);

                $modelCopy->isNewRecord = true;
                $modelCopy->setAttributes($attr);
                $obj->sendPipe = false;
                $modelCopy->save(false) && $modelCopy->id=0;
            }
        }
        Yii::$app->wafHelper->pipe('CMD_NGINX');
        Yii::$app->sysJsonMsg->msg(true, '', false);
    }

    /**
     * 执行删除动作时， 同步删除 模板规则库的同步
     */
    public function afterDelete()
    {
        parent::afterDelete();

        WafRuleModel::updateRuleByCustomRulesDelete($this->realid);
    }
}
